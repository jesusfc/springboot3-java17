/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.41).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.jesusfc.springboot3java17.openApi.v1.api;

import com.jesusfc.springboot3java17.openApi.v1.model.User;
import com.jesusfc.springboot3java17.openApi.v1.model.UserPageList;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Locale;
import java.util.UUID;

@Validated
public interface IUser {
    @Operation(summary = "Create a new User", description = "Create a new User", security = {@SecurityRequirement(name = "BasicAuth"), @SecurityRequirement(name = "JwtAutoToken")}, tags = {"User"})
    @ApiResponses(value = {@ApiResponse(responseCode = "201", description = "Create a user"),
            @ApiResponse(responseCode = "400", description = "Bad Request")})
    @RequestMapping(value = "/v1/user", consumes = {"application/json"}, method = RequestMethod.POST)
    ResponseEntity<Void> createUser(@Parameter(in = ParameterIn.DEFAULT, description = "User Object", schema = @Schema()) @Valid @RequestBody User body);


    @Operation(summary = "Delete a user by Id", description = "Delete a single **User** by its Id value.", security = {@SecurityRequirement(name = "BasicAuth"), @SecurityRequirement(name = "JwtAutoToken")}, tags = {"User"})
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "Custumer delete"),
            @ApiResponse(responseCode = "404", description = "Not Found")})
    @RequestMapping(value = "/v1/user/{userId}", method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUserById(@Parameter(in = ParameterIn.PATH, description = "User Id", required = true, schema = @Schema()) @PathVariable("userId") Long userId);


    @Operation(
            summary = "Get a user by email",
            description = "Get a single **User** by its email value.",
            security = {
                    @SecurityRequirement(name = "BasicAuth"),
                    @SecurityRequirement(name = "JwtAutoToken")
                },
            tags = {"User"}
    )
    @ApiResponses(
            value = {
                    @ApiResponse(
                            responseCode = "200",
                            description = "Get a custumer",
                            content = @Content(
                                    mediaType = "application/json",
                                    schema = @Schema(
                                                implementation = User.class
                                        )
                            )
                    ),
                    @ApiResponse(
                            responseCode = "404",
                            description = "Not Found"
                    )
            }
    )
    @RequestMapping(value = "/v1/user/{email}", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<User> getUserByEmail(
            @Parameter(in = ParameterIn.PATH, description = "User Email", required = true, schema = @Schema())
            @PathVariable("email") String userId);


    @Operation(summary = "Get a list", description = "Get a list of a **User list**", tags = {"User"})
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "List of users", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))),

            @ApiResponse(responseCode = "404", description = "Not Found")})
    @RequestMapping(value = "/v1/user/list", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<List<User>> getUserList(Locale locale);


    @Operation(summary = "List of a User by pagination list", description = "List of a User by pagination list with more info", security = {@SecurityRequirement(name = "BasicAuth"), @SecurityRequirement(name = "JwtAutoToken")}, tags = {"User"})
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "List of users", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UserPageList.class))),

            @ApiResponse(responseCode = "404", description = "Not Found")})
    @RequestMapping(value = "/v1/user/pagelist", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<UserPageList> getUserPageList(@Parameter(in = ParameterIn.QUERY, description = "Page Number", schema = @Schema(defaultValue = "1")) @Valid @RequestParam(value = "pageNumber", required = false, defaultValue = "1") Integer pageNumber, @Parameter(in = ParameterIn.QUERY, description = "Page Size", schema = @Schema(defaultValue = "25")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "25") Integer pageSize);


    @Operation(summary = "Update User", description = "Update User by Id", security = {@SecurityRequirement(name = "BasicAuth"), @SecurityRequirement(name = "JwtAutoToken")}, tags = {"User"})
    @ApiResponses(value = {@ApiResponse(responseCode = "204", description = "User Updated")})
    @RequestMapping(value = "/v1/user/{userId}", consumes = {"application/json"}, method = RequestMethod.PUT)
    ResponseEntity<Void> updateUserById(@Parameter(in = ParameterIn.PATH, description = "User Id", required = true, schema = @Schema()) @PathVariable("userId") UUID userId, @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody User body);

}

