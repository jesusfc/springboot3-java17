/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.41).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.jesusfc.springboot3java17.openApi.v1.api;

import com.jesusfc.springboot3java17.openApi.v1.model.CustomerList;
import com.jesusfc.springboot3java17.openApi.v1.model.CustomerPageList;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@Validated
public interface ICustomer {
    @Operation(summary = "Create a new Customer", description = "Create a new Customer", security = {@SecurityRequirement(name = "BasicAuth"), @SecurityRequirement(name = "JwtAutoToken")}, tags = {"Customer"})
    @ApiResponses(value = {@ApiResponse(responseCode = "201", description = "Create a customer"),
            @ApiResponse(responseCode = "400", description = "Bad Request")})
    @RequestMapping(value = "/v1/clientes", consumes = {"application/json"}, method = RequestMethod.POST)
    ResponseEntity<Void> createCustomer(@Parameter(in = ParameterIn.DEFAULT, description = "Customer Object", schema = @Schema()) @Valid @RequestBody ICustomer body);


    @Operation(summary = "Delete a customer by Id", description = "Delete a single **Customer** by its Id value.", security = {@SecurityRequirement(name = "BasicAuth"), @SecurityRequirement(name = "JwtAutoToken")}, tags = {"Customer"})
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "Custumer delete"),
            @ApiResponse(responseCode = "404", description = "Not Found")})
    @RequestMapping(value = "/v1/clientes/{customerId}", method = RequestMethod.DELETE)
    ResponseEntity<Void> delCustomerById(@Parameter(in = ParameterIn.PATH, description = "Customer Id", required = true, schema = @Schema()) @PathVariable("customerId") UUID customerId);


    @Operation(summary = "Get a customer by Id", description = "Get a single **Customer** by its Id value.", security = {@SecurityRequirement(name = "BasicAuth"), @SecurityRequirement(name = "JwtAutoToken")}, tags = {"Customer"})
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "Get a custumer", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ICustomer.class))),

            @ApiResponse(responseCode = "404", description = "Not Found")})
    @RequestMapping(value = "/v1/clientes/{customerId}", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<ICustomer> getCustomerById(@Parameter(in = ParameterIn.PATH, description = "Customer Id", required = true, schema = @Schema()) @PathVariable("customerId") UUID customerId);


    @Operation(summary = "Get a list", description = "Get a list of a **Customer list**", tags = {"Customer"})
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "List of costumers", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CustomerList.class)))),

            @ApiResponse(responseCode = "404", description = "Not Found")})
    @RequestMapping(value = "/v1/clientes/list", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<List<CustomerList>> getCustomerList();


    @Operation(summary = "List of a Customer by pagination list", description = "List of a Customer by pagination list with more info", security = {@SecurityRequirement(name = "BasicAuth"), @SecurityRequirement(name = "JwtAutoToken")}, tags = {"Customer"})
    @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "List of costumers", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CustomerPageList.class)))),

            @ApiResponse(responseCode = "404", description = "Not Found")})
    @RequestMapping(value = "/v1/clientes/pagelist", produces = {"application/json"}, method = RequestMethod.GET)
    ResponseEntity<List<CustomerPageList>> getCustomerPageList(@Parameter(in = ParameterIn.QUERY, description = "Page Number", schema = @Schema(defaultValue = "1")) @Valid @RequestParam(value = "pageNumber", required = false, defaultValue = "1") Integer pageNumber, @Parameter(in = ParameterIn.QUERY, description = "Page Size", schema = @Schema(defaultValue = "25")) @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "25") Integer pageSize);


    @Operation(summary = "Update Customer", description = "Update Customer by Id", security = {@SecurityRequirement(name = "BasicAuth"), @SecurityRequirement(name = "JwtAutoToken")}, tags = {"Customer"})
    @ApiResponses(value = {@ApiResponse(responseCode = "204", description = "Customer Updated")})
    @RequestMapping(value = "/v1/clientes/{customerId}", consumes = {"application/json"}, method = RequestMethod.PUT)
    ResponseEntity<Void> updateCustomerById(@Parameter(in = ParameterIn.PATH, description = "Customer Id", required = true, schema = @Schema()) @PathVariable("customerId") UUID customerId, @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody ICustomer body);

}

