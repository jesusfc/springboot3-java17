openapi: 3.0.3
info:
  version: '1.0'
  title: OpenApi Test
  description: Start test Open Api from crash
  termsOfService: www.jesusfc.com/openapi/terms
  contact:
    name: Jesus Fdez. Caraballo
    url: http:/www.jesusfc.com
    email: jfcaraballo@gmail.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://api.jesusfc.com'
    description: Api Url server for production OpenApi
  - url: 'https://dev-api.jesusfc.com'
    description: Api Url server for testing OpenApi
paths:
  /v1/user/{userId}:
    get:
      summary: Get a user by Id
      description: Get a single **User** by its Id value.
      operationId: getUserById
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
      responses:
        '200':
          description: Get a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
    put:
      summary: Update User
      description: Update User by Id
      operationId: updateUserById
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: User Updated
    delete:
      summary: Delete a user by Id
      description: Delete a single **User** by its Id value.
      operationId: delUserById
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
      responses:
        '200':
          description: Custumer delete
        '404':
          description: Not Found
  /v1/user:
    post:
      summary: Create a new User
      description: Create a new User
      operationId: createUser
      tags:
        - User
      requestBody:
        description: User Object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Create a user
          headers:
            Location:
              description: Location of the created user
              schema:
                type: string
                format: uri
                example: https://api.jesusfc.com/v1/user/{userId}
        '400':
          description: Bad Request
  /v1/user/list:
    get:
      tags:
        - User
      summary: Get a list
      operationId: getUserList
      description: Get a list of a **User list**
      responses:
        '200':
          description: List of costumers
          content:
            application/json:
              schema:
                type: array
                minItems: 0
                description: List of a users
                items:
                  $ref: '#/components/schemas/UserList'
        '404':
          description: Not Found
      security: []
  /v1/user/pagelist:
    get:
      tags:
        - User
      summary: List of a User by pagination list
      description: List of a User by pagination list with more info
      operationId: getUserPageList
      parameters:
        - $ref: "#/components/parameters/PageNumberParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        '200':
          description: List of costumers
          content:
            application/json:
              schema:
                description: List of a users
                items:
                  $ref: '#/components/schemas/UserPageList'
        '404':
          description: Not Found
security:
  - BasicAuth: []
  - JwtAutoToken: []
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    JwtAutoToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
          example: 123 main
        city:
          type: string
          example: St Pete
        stateCode:
          maxLength: 2
          minLength: 2
          type: string
          description: 2 Letter State Code
          enum:
            - AL
            - AK
            - AZ
            - AR
            - CA
        zipCode:
          type: string
          example: '33701'
    User:
      type: object
      minItems: 1
      maxItems: 1
      description: A user
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          minLength: 3
          maxLength: 30
          example: Jesus
        familyName:
          type: string
          minLength: 3
          maximum: 30
          example: Fdez.
        email:
          type: string
        enable:
          type: boolean
          default: false
        createAt:
          type: string
          format: date
        address:
          $ref: '#/components/schemas/Address'
    UserList:
      type: array
      minItems: 0
      description: List of a users
      items:
        $ref: '#/components/schemas/User'
    UserPageList:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/UserList'
      allOf:
        - $ref: '#/components/schemas/PagedResponse'
    PagedResponse:
      type: object
      properties:
        pageable:
          $ref: '#/components/schemas/PagedResponse_pageable'
        totalPages:
          type: integer
          format: int32
        last:
          type: boolean
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        first:
          type: boolean
    PagedResponse_pageable:
      type: object
      properties:
        sort:
          $ref: '#/components/schemas/PagedResponse_pageable_sort'
        offset:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    PagedResponse_pageable_sort:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
  parameters:
    UserIdPathParam:
      name: userId
      in: path
      description: User Id
      required: true
      schema:
        type: string
        format: uuid
    PageNumberParam:
      name: pageNumber
      in: query
      description: Page Number
      schema:
        type: integer
        format: int32
        default: 1
    PageSizeParam:
      name: pageSize
      in: query
      description: Page Size
      required: false
      schema:
        type: integer
        format: int32
        default: 25